--[[
    Made by: Beke_Rugos
]]--
--[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
--Sends a basic text notification
--Return: nil
function notify(string)
    SetNotificationTextEntry("STRING")
    AddTextComponentString(string)  
    DrawNotification(true, false)
  end
  --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
  --Sends an advanced notification, with icons etc
  --Return: nil
  function ADnotify(icon, type, sender, title, text) 
    SetNotificationTextEntry("STRING")
    AddTextComponentString(text)
    SetNotificationMessage(icon, icon, true, type, sender, title, text)
    DrawNotification(false, true)
end
--[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
  --Finds an elements index in a table
  --Return: integer(index)/nil
  function ind(table, value)
    for k,v in pairs(table) do
       table[v]=k
    end
    return table[value]
    end
    --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
    --Checks if a table contains a value
    --Return: true/false
    function has_value (tab, val)
        for i, value in ipairs(tab) do
            if value == val then
                return true
            end
        end
      
        return false
      end  
      --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
      --Gets the hash key of a string
      --Return: the hash
      function hash(obj)
        return GetHashKey(obj)
        end
        --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
        --Sends a basic white chat message
        --Return: nil
        function chat(txt)
            TriggerEvent('chat:addMessage', {
                args = {txt}
                })
        end
        --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
        --Makes a marker, (has to be in a while loop)
        --Return: nil
        function addMarker(x, y, z, typ, sx, sy, sz, r, g, b, a)
            DrawMarker(typ, x, y, z + 1, 0.0, 0.0, 0.0, 0.0, 180.0, 0.0, sx, sy, sz, r, g, b, a, false, true, 2, nil, nil, false)
          end
          --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
          --Makes a blip for an entity
          --Return: the blip handle
          function makeENTBlip(sprite, color, size, title, ent)
            local blip = AddBlipForEntity(ent)
            
                    SetBlipSprite(blip, sprite)
                    SetBlipColour(blip, color)
                    SetBlipDisplay(blip, 6)
                    SetBlipScale(blip, size)
                    BeginTextCommandSetBlipName("STRING")
              AddTextComponentString(title)
              EndTextCommandSetBlipName(blip)
                    print('Blips made!')
                    return blip
          end
          --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
          --Adds a blip to a coord
          --Return: the blip handle
          function makeBlip(x, y, z, sprite, color, title)
            local blip = AddBlipForCoord(x, y, z)
                    SetBlipSprite(blip, sprite)
                    SetBlipColour(blip, color)
                    SetBlipDisplay(blip, 6)
                    SetBlipScale(blip, 1.0)
                    BeginTextCommandSetBlipName("STRING")
                    AddTextComponentString(title)
                    EndTextCommandSetBlipName(blip)
                    return blip
          end
    --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
      --Sends an advanced chat message
          --Return: nil
          function ADchat(txt, r, g, b, mline, auth)
            TriggerEvent('chat:addMessage', {
                color = {r, g, b},
                multiline = mline,
                args = {auth, txt}
                })
        end
    --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
      --Splits the string at a separator
      --Return: table of strings


        function split (inputstr, sep)
          if sep == nil then
                  sep = "%s"
          end
          local t={}
          for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                  table.insert(t, str)
          end
          return t
  end

   --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
      --Sends a notification to the top left corner of the screen

  function alert(msg) 
    SetTextComponentFormat("STRING")
    AddTextComponentString(msg)
    DisplayHelpTextFromStringLabel(0,0,1,-1)
end
--[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--
      function GetAllIdentifiers(player)
        local identifiers = {}
        for i = 0, GetNumPlayerIdentifiers(player) - 1 do
            local raw = GetPlayerIdentifier(player, i)
            local source, value = raw:match("^([^:]+):(.+)$")
            if source and value then
                identifiers[source] = value
            end
        end
        return identifiers
    end


    function highest(tbl)
      local ttbl = {}
      for k,v in pairs(tbl) do
      table.insert(ttbl, k)
      end
      local ret = math.max(table.unpack(ttbl))
      return ret
      end
--[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--

      function remnils(t)
          local ans = {}
          for _,v in pairs(t) do
            ans[ #ans+1 ] = v
          end
          return ans
        end
--[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--


        function dump(o)
          if type(o) == 'table' then
             local s = '{ '
             for k,v in pairs(o) do
                if type(k) ~= 'number' then k = '"'..k..'"' end
                s = s .. '['..k..'] = ' .. dump(v) .. ','
             end
             return s .. '} '
          else
             return tostring(o)
          end
       end
       --[[
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
####################################################################################################################################################################################################################
      ]]--

       function clear(o)
          local hash = {}
          local res = {}
          for _,v in ipairs(o) do
             if (not hash[v]) then
                 res[#res+1] = v -- you could print here instead of saving to result table if you wanted
                 hash[v] = true
             end
          
          end
          return res
       end      
        --[[
        ####################################################################################################################################################################################################################
        ####################################################################################################################################################################################################################
        ####################################################################################################################################################################################################################
              ]]--
              function read()

                DisplayOnscreenKeyboard(1, "FMMC_MPM_NA", "", "", "", "", "", 30)
                while UpdateOnscreenKeyboard() == 0 do
                    DisableAllControlActions(0);
                    Wait(0);
                end
                if GetOnscreenKeyboardResult() then
                    local result = GetOnscreenKeyboardResult()
                end
                return result
            end




            RegisterNetEvent(':Notif')
AddEventHandler(':Notif', function(exc, ico, nm, titl, txt)
  local src = source
  local nm = GetPlayerName(src)
  txt = string.gsub(txt, '/name/', nm)
TriggerClientEvent(':Cl_Notif', -1, exc, ico, nm, titl, txt, name)
print('[:Notif]: Client notif triggered')

end)


RegisterNetEvent(':Cl_Notif')
AddEventHandler(':Cl_Notif', function(exc, ico, nm, titl, txt, pn)
if PlayerPedId() ~= exc then
  ADnotify(ico, 0, nm, titl, txt)

end
end)

